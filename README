HoptoadNotifier
===============

This is the notifier plugin for integrating apps with Hoptoad.

When an uncaught exception occurs, HoptoadNotifier will POST the relevant data 
to the Hoptoad server specified in your environment.



WARNING
-------

THIS IS A HACK.

- it is based on the (old) version that is known to work with the redmine_hoptoad_server Redmine
  plugin (https://github.com/yeah/redmine_hoptoad_server)
- it features a rack middleware for easy integration with Rails3
- it will NOT run on Rails 2.x or older. Please get the revision mentioned in the redmine_hoptoad_server
  readme directly from https://github.com/thoughtbot/hoptoad_notifier if you intend to use the plugin with
  Rails < 3.0


INSTALLATION
------------

REMOVE EXCEPTION_NOTIFIER

In your ApplicationController, REMOVE this line:

  include ExceptionNotifiable

In your config/environment* files, remove all references to ExceptionNotifier

Remove the vendor/plugins/exception_notifier directory.

INSTALL HOPTOAD_NOTIFIER

just put the plugin into vendor/plugins

CONFIGURATION

You should have something like this in config/environments/production.rb:

  Whatever::Application.config.middleware.use HoptoadNotifier::Middleware,
                                              :api_key => '1234567890abcdef'
                                              
For use with the redmine plugin mentioned above, replace the api_key value with
the options hash as described there.


That should be it! Now all exceptions will be logged to Hoptoad where they can
be aggregated, filtered, sorted, analyzed, massaged, and searched.

You can test that hoptoad is working in your production environment by using 
this rake task (from RAILS_ROOT):

  rake hoptoad:test

If everything is configured properly, that task will send a notice to hoptoad 
which will be visible immediately.

USAGE


GOING BEYOND EXCEPTIONS

You can also pass a hash to notify_hoptoad method and store whatever you want, not just an exception. And you can also use it anywhere, not just in controllers:

  begin 
    params = { 
      # params that you pass to a method that can throw an exception 
    }
    my_unpredicable_method(params) 
  rescue => e
    HoptoadNotifier.notify(
      :error_class => "Special Error", 
      :error_message => "Special Error: #{e.message}", 
      :request => { :params => params }
    )
  end

While in your controllers you use the notify_hoptoad method, anywhere else in your code, use HoptoadNotifier.notify. Hoptoad will get all the information about the error itself. As for a hash, these are the keys you should pass:

  * :error_class – Use this to group similar errors together. When Hoptoad catches an exception it sends the class name of that exception object.
  * :error_message – This is the title of the error you see in the errors list. For exceptions it is "#{exception.class.name}: #{exception.message}"
  * :request – While there are several ways to send additional data to Hoptoad, passing a Hash with :params key as :request as in the example above is the most common use case. When Hoptoad catches an exception in a controller, the actual HTTP client request is being sent using this key.

Hoptoad merges the hash you pass with these default options:

  def default_notice_options
    { 
      :api_key => HoptoadNotifier.api_key, 
      :error_message => 'Notification', 
      :backtrace => caller, 
      :request => {}, 
      :session => {}, 
      :environment => ENV.to_hash 
    } 
  end

You can override any of those parameters.

FILTERING

You can specify a whitelist of errors, that Hoptoad will not report on.  Use 
this feature when you are so apathetic to certain errors that you don't want 
them even logged.

This filter will only be applied to automatic notifications, not manual 
notifications (when #notify is called directly).

Hoptoad ignores the following exceptions by default:
  ActiveRecord::RecordNotFound
  ActionController::RoutingError
  ActionController::InvalidAuthenticityToken
  CGI::Session::CookieStore::TamperedWithCookie
  
To ignore errors in addition to those, specify their names in your Hoptoad 
configuration block.

  HoptoadNotifier.configure do |config|
    config.api_key      = '1234567890abcdef'
    config.ignore       << ActiveRecord::IgnoreThisError
  end

To ignore *only* certain errors (and override the defaults), use the 
#ignore_only attribute.

  HoptoadNotifier.configure do |config|
    config.api_key      = '1234567890abcdef'
    config.ignore_only  = [ActiveRecord::IgnoreThisError]
  end

To ignore certain user agents, add in the #ignore_user_agent attribute as a
string or regexp:

  HoptoadNotifier.configure do |config|
    config.api_key      = '1234567890abcdef'
    config.ignore_user_agent  << /Ignored/
    config.ignore_user_agent << 'IgnoredUserAgent'
  end

TESTING

When you run your tests, you might notice that the hoptoad service is recording
notices generated using #notify when you don't expect it to.  You can 
use code like this in your test_helper.rb to redefine that method so those 
errors are not reported while running tests.

  module HoptoadNotifier::Catcher
    def notify(thing)
      # do nothing.
    end
  end

THANKS

Thanks to Eugene Bolshakov for the excellent write-up on GOING BEYOND EXCEPTIONS, which we have included above.

